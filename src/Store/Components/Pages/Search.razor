@page "/search"
@using SearchEntities

@inject Store.Services.ProductService ProductService
@inject Store.Services.McpServerService McpServerService
@inject IConfiguration Configuration
@attribute [StreamRendering(true)]
@rendermode InteractiveServer

<PageTitle>Search Products</PageTitle>

<h1>Search Products</h1>

<p>Search our amazing outdoor products that you can purchase.</p>

<div class="form-group">
    <label for="search" class="form-label">Type your question:</label>
    <div class="input-group mb-3">
        <input type="text" id="search" class="form-control" @bind="searchTerm" placeholder="Enter search term..." />
        <button id="btnSearch" class="btn btn-primary" @onclick="DoSearch" type="submit">Search</button>
    </div>
    <div class="form-check form-switch mb-3">
        <InputCheckbox id="smartSearch2" @bind-Value="smartSearch" />
        <label class="form-check-label" for="smartSearch">Use Semantic Search</label>
        <InputCheckbox id="mcpSearch" @bind-Value="mcpSearch" />
        <label class="form-check-label" for="mcpSearch">Use MCP Server</label>
    </div>
    <hr />
    <p class="quote">@searchResponse.Response</p>
</div>

@if (!string.IsNullOrEmpty(searchResponse.FunctionCallId))
{
    <div class="card mb-3">
        <div class="card-header" @onclick="ToggleFunctionInfo" style="cursor: pointer;">
            <div class="d-flex justify-content-between align-items-center">
                <span>Function Call Details</span>
                <i class="@(showFunctionInfo ? "oi oi-chevron-top" : "oi oi-chevron-bottom")"></i>
            </div>
        </div>
        <div class="collapse @(showFunctionInfo ? "show" : "")" id="functionCallDetails">
            <div class="card-body">
                <div class="row">
                    <div class="col-md-4"><strong>Function Call ID:</strong></div>
                    <div class="col-md-8">@searchResponse.FunctionCallId</div>
                </div>
                <div class="row">
                    <div class="col-md-4"><strong>Function Name:</strong></div>
                    <div class="col-md-8">@searchResponse.FunctionCallName</div>
                </div>
                <div class="row">
                    <div class="col-md-4"><strong>Server Name:</strong></div>
                    <div class="col-md-8">@searchResponse.ServerInfoName</div>
                </div>
            </div>
        </div>
    </div>
}

@if (isLoading)
{
    <div class="loading">
        <p><em>Loading...</em></p>
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}
else if (searchResponse.Products != null && searchResponse.Products.Count > 0)
{
    <table class="table">
        <thead>
            <tr>
                <th>Image</th>
                <th>Name</th>
                <th>Description</th>
                <th>Price</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in searchResponse.Products)
            {
                <tr>
                    <!-- Simulating images being hosted on a CDN -->
                    <td><img height="80" width="80" src="https://raw.githubusercontent.com/MicrosoftDocs/mslearn-dotnet-cloudnative/main/dotnet-docker/Products/wwwroot/images/@product.ImageUrl" /></td>
                    <td>@product.Name</td>
                    <td>@product.Description</td>
                    <td>@product.Price</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private SearchResponse searchResponse = new();
    private string searchTerm = "";
    private bool smartSearch = false;
    private bool mcpSearch = false;
    private bool isLoading = false;
    private string errorMessage = "";
    private bool showFunctionInfo = false;

    private async Task DoSearch(MouseEventArgs e)
    {
        try
        {
            isLoading = true;
            errorMessage = "";

            searchResponse = new();
            if (mcpSearch)
            {
                searchResponse = await McpServerService.Search(searchTerm);
            }
            else
            {
                searchResponse = await ProductService.Search(searchTerm, smartSearch);
            }           

        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
    private void ToggleFunctionInfo()
    {
        showFunctionInfo = !showFunctionInfo;
    }
}
